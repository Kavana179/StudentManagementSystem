name: SonarQube Analysis

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonarqube-analysis:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v2

      # Setup .NET SDK (Ensure the appropriate version is installed)
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.x'  # Use the version you need (e.g., 6.x or 3.x, depending on your project)

      # Install dependencies
      - name: Restore Dependencies
        run: dotnet restore /home/runner/work/StudentManagementSystem/StudentManagementSystem/StudentManagementSystem.sln

      # Check if the .sln file exists and display its contents
      - name: Checking for solution file...
        run: |
          echo "Checking for solution file..."
          ls -l /home/runner/work/StudentManagementSystem/StudentManagementSystem/StudentManagementSystem.sln
          cat /home/runner/work/StudentManagementSystem/StudentManagementSystem/StudentManagementSystem.sln

      # Remove BOM if present in the solution file (check for BOM)
      - name: Remove BOM (if any) from solution file
        run: |
          file_path="/home/runner/work/StudentManagementSystem/StudentManagementSystem/StudentManagementSystem.sln"
          if xxd $file_path | head -n 1 | grep -q "ef bb bf"; then
            echo "BOM detected in .sln file. Removing BOM..."
            sed -i '1s/^\xEF\xBB\xBF//' $file_path
          else
            echo "No BOM detected in .sln file."
          fi

      # Clean and build the solution to ensure it's in a good state before analysis
      - name: Clean and Build Solution
        run: |
          dotnet clean /home/runner/work/StudentManagementSystem/StudentManagementSystem/StudentManagementSystem.sln
          dotnet build /home/runner/work/StudentManagementSystem/StudentManagementSystem/StudentManagementSystem.sln

      # Begin SonarScanner analysis with debug output
      - name: Begin SonarScanner Analysis
        run: |
          dotnet sonarscanner begin /k:"Kavana179_StudentManagementSystem" /o:"kavana179" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" -X

      # Build the solution again after beginning the analysis
      - name: Build the Solution for Analysis
        run: |
          dotnet build /home/runner/work/StudentManagementSystem/StudentManagementSystem/StudentManagementSystem.sln

      # End SonarScanner analysis
      - name: End SonarScanner Analysis
        run: |
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
